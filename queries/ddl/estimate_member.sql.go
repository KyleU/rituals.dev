// Code generated by qtc from "estimate_member.sql". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

// --

//line queries/ddl/estimate_member.sql:1
package ddl

//line queries/ddl/estimate_member.sql:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line queries/ddl/estimate_member.sql:1
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line queries/ddl/estimate_member.sql:1
func StreamEstimateMemberDrop(qw422016 *qt422016.Writer) {
//line queries/ddl/estimate_member.sql:1
	qw422016.N().S(`
drop table if exists "estimate_member";
-- `)
//line queries/ddl/estimate_member.sql:3
}

//line queries/ddl/estimate_member.sql:3
func WriteEstimateMemberDrop(qq422016 qtio422016.Writer) {
//line queries/ddl/estimate_member.sql:3
	qw422016 := qt422016.AcquireWriter(qq422016)
//line queries/ddl/estimate_member.sql:3
	StreamEstimateMemberDrop(qw422016)
//line queries/ddl/estimate_member.sql:3
	qt422016.ReleaseWriter(qw422016)
//line queries/ddl/estimate_member.sql:3
}

//line queries/ddl/estimate_member.sql:3
func EstimateMemberDrop() string {
//line queries/ddl/estimate_member.sql:3
	qb422016 := qt422016.AcquireByteBuffer()
//line queries/ddl/estimate_member.sql:3
	WriteEstimateMemberDrop(qb422016)
//line queries/ddl/estimate_member.sql:3
	qs422016 := string(qb422016.B)
//line queries/ddl/estimate_member.sql:3
	qt422016.ReleaseByteBuffer(qb422016)
//line queries/ddl/estimate_member.sql:3
	return qs422016
//line queries/ddl/estimate_member.sql:3
}

// --

//line queries/ddl/estimate_member.sql:5
func StreamEstimateMemberCreate(qw422016 *qt422016.Writer) {
//line queries/ddl/estimate_member.sql:5
	qw422016.N().S(`
create table if not exists "estimate_member" (
  "estimate_id" uuid not null,
  "user_id" uuid not null,
  "name" text not null,
  "picture" text not null,
  "role" member_status not null,
  "created" timestamp not null default now(),
  "updated" timestamp default now(),
  foreign key ("estimate_id") references "estimate" ("id"),
  foreign key ("user_id") references "user" ("id"),
  primary key ("estimate_id", "user_id")
);

create index if not exists "estimate_member__estimate_id_idx" on "estimate_member" ("estimate_id");

create index if not exists "estimate_member__user_id_idx" on "estimate_member" ("user_id");
-- `)
//line queries/ddl/estimate_member.sql:22
}

//line queries/ddl/estimate_member.sql:22
func WriteEstimateMemberCreate(qq422016 qtio422016.Writer) {
//line queries/ddl/estimate_member.sql:22
	qw422016 := qt422016.AcquireWriter(qq422016)
//line queries/ddl/estimate_member.sql:22
	StreamEstimateMemberCreate(qw422016)
//line queries/ddl/estimate_member.sql:22
	qt422016.ReleaseWriter(qw422016)
//line queries/ddl/estimate_member.sql:22
}

//line queries/ddl/estimate_member.sql:22
func EstimateMemberCreate() string {
//line queries/ddl/estimate_member.sql:22
	qb422016 := qt422016.AcquireByteBuffer()
//line queries/ddl/estimate_member.sql:22
	WriteEstimateMemberCreate(qb422016)
//line queries/ddl/estimate_member.sql:22
	qs422016 := string(qb422016.B)
//line queries/ddl/estimate_member.sql:22
	qt422016.ReleaseByteBuffer(qb422016)
//line queries/ddl/estimate_member.sql:22
	return qs422016
//line queries/ddl/estimate_member.sql:22
}
