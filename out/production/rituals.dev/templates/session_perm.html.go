// Code generated by hero.
// source: github.com/kyleu/rituals.dev/web/templates/session/perm.html
// DO NOT EDIT!
package templates

import (
	"bytes"

	"github.com/kyleu/rituals.dev/app/auth"
	"github.com/kyleu/rituals.dev/app/util"
	"github.com/kyleu/rituals.dev/app/web"
	"github.com/shiyanhui/hero"
)

func ComponentSessionPerm(svc util.Service, showTeam bool, showSprint bool, auths auth.Records, ctx web.RequestContext, buffer *bytes.Buffer) {
	buffer.WriteString(`
<div class="uk-margin">
  <label class="uk-form-label" for="model-perm-form">Permissions</label>
  <div id="model-perm-form">
    <ul class="uk-list">
      `)
	if !(showTeam || showSprint || len(auths) > 0) {
		buffer.WriteString(`
        <li>
          Control access to this `)
		hero.EscapeHTML(svc.Key, buffer)
		buffer.WriteString(` by
          <a class="`)
		hero.EscapeHTML(ctx.Profile.LinkClass(), buffer)
		buffer.WriteString(`" href="`)
		hero.EscapeHTML(ctx.Route(util.KeyProfile), buffer)
		buffer.WriteString(`">signing in</a>
        </li>
      `)
	}
	if showTeam {
		buffer.WriteString(`
        <li id="perm-team-section">
          <label>
            <input id="perm-team-checkbox" name="perm-team" class="uk-checkbox uk-margin-small-right" type="checkbox" value="true" />Must be a member of this `)
		hero.EscapeHTML(svc.Key, buffer)
		buffer.WriteString(`'s `)
		hero.EscapeHTML(util.SvcTeam.Key, buffer)
		buffer.WriteString(`
          </label>
        </li>
      `)
	}
	if showSprint {
		buffer.WriteString(`
        <li id="perm-sprint-section">
          <label>
            <input id="perm-sprint-checkbox" name="perm-sprint" class="uk-checkbox uk-margin-small-right" type="checkbox" value="true" />Must be a member of this `)
		hero.EscapeHTML(svc.Key, buffer)
		buffer.WriteString(`'s `)
		hero.EscapeHTML(util.SvcSprint.Key, buffer)
		buffer.WriteString(`
          </label>
        </li>
      `)
	}
	if ctx.App.Auth.Enabled {
		for _, p := range ctx.App.Auth.EnabledProviders {

			pcls := "uk-checkbox uk-margin-small-right"
			poc := "permission.onChanged('provider', '" + p.Key + "', this.checked)"
			cls := "uk-checkbox uk-margin-small-right perm-" + p.Key + "-email"
			oc := "permission.onChanged('email', '" + p.Key + "', this.checked)"
			a := auths.FindByProvider(p.Key)

			style := "display: none;"
			if len(a) > 0 {
				style = "display: block;"
			}

			buffer.WriteString(`
          <li id="perm-`)
			hero.EscapeHTML(p.Key, buffer)
			buffer.WriteString(`-section" style="`)
			hero.EscapeHTML(style, buffer)
			buffer.WriteString(`">
            <label>
              <input id="perm-`)
			hero.EscapeHTML(p.Key, buffer)
			buffer.WriteString(`-checkbox" name="perm-`)
			hero.EscapeHTML(p.Key, buffer)
			buffer.WriteString(`" class="`)
			hero.EscapeHTML(pcls, buffer)
			buffer.WriteString(`" onchange="`)
			hero.EscapeHTML(poc, buffer)
			buffer.WriteString(`" type="checkbox" value="true" />Must sign in with `)
			hero.EscapeHTML(p.Title, buffer)
			buffer.WriteString(`
            </label>
            <div id="perm-`)
			hero.EscapeHTML(p.Key, buffer)
			buffer.WriteString(`-email-container">
              <ul>
                `)
			for _, e := range a.Emails() {
				domain := util.GetDomain(e)
				buffer.WriteString(`
                  <li>
                    <label>
                      <input class="`)
				hero.EscapeHTML(cls, buffer)
				buffer.WriteString(`" type="checkbox" name="perm-`)
				hero.EscapeHTML(p.Key, buffer)
				buffer.WriteString(`-email" value="`)
				hero.EscapeHTML(domain, buffer)
				buffer.WriteString(`" onchange="`)
				hero.EscapeHTML(oc, buffer)
				buffer.WriteString(`" />
                      Using email address `)
				hero.EscapeHTML(domain, buffer)
				buffer.WriteString(`
                    </label>
                  </li>
                `)
			}
			buffer.WriteString(`
              </ul>
            </div>
          </li>
        `)
		}
	}
	buffer.WriteString(`
    </ul>
  </div>
</div>
`)

}
