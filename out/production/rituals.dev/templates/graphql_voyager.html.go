// Code generated by hero.
// source: github.com/kyleu/rituals.dev/web/templates/graphql/voyager.html
// DO NOT EDIT!
package templates

import (
	"io"

	"github.com/kyleu/rituals.dev/app/util"
	"github.com/kyleu/rituals.dev/app/web"
	"github.com/shiyanhui/hero"
)

func GraphQLVoyager(root string, ctx web.RequestContext, w io.Writer) (int, error) {
	_buffer := hero.GetBuffer()
	defer hero.PutBuffer(_buffer)
	_buffer.WriteString(`<!DOCTYPE html>
<html lang="en">
`)
	Head(ctx, _buffer)
	_buffer.WriteString(`
<body style="visibility: hidden;">
`)
	Navbar(ctx, _buffer)
	_buffer.WriteString(`
<div id="`)
	hero.EscapeHTML(util.KeyContent, _buffer)
	_buffer.WriteString(`" data-uk-height-viewport="expand: true">
`)
	for _, flash := range ctx.Flashes {
		cls, content := web.ParseFlash(flash)
		_buffer.WriteString(`
  <div class="alert-top `)
		hero.EscapeHTML(cls, _buffer)
		_buffer.WriteString(`" data-uk-alert>
    <a class="uk-alert-close" href="#" data-uk-close=""></a>
    <p>`)
		hero.EscapeHTML(content, _buffer)
		_buffer.WriteString(`</p>
  </div>
`)
	}
	_buffer.WriteString(`
  <div id="`)
	hero.EscapeHTML(util.KeyVoyager, _buffer)
	_buffer.WriteString(`" style="height: calc(100vh - 54px);"></div>
  <script src="/assets/vendor/react/react.production.min.js"></script>
  <script src="/assets/vendor/react/react-dom.production.min.js"></script>

  <link rel="stylesheet" media="screen" href="/assets/vendor/graphql-voyager/voyager.css")>
  <script src="/assets/vendor/graphql-voyager/voyager.min.js"></script>

  <script>
    function introspectionProvider(query) {
      return fetch('`)
	hero.EscapeHTML(ctx.Route(util.AdminLink(util.KeyGraphQL)), _buffer)
	_buffer.WriteString(`', {
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({query: query}),
      }).then(response => response.json());
    }

    GraphQLVoyager.init(document.getElementById('`)
	hero.EscapeHTML(util.KeyVoyager, _buffer)
	_buffer.WriteString(`'), {introspection: introspectionProvider, displayOptions: { rootType: '`)
	hero.EscapeHTML(root, _buffer)
	_buffer.WriteString(`' }})
  </script>
`)

	_buffer.WriteString(`
</div>
<script>window.addEventListener("load", function() { dom.initDom('`)
	hero.EscapeHTML(ctx.Profile.Theme.String(), _buffer)
	_buffer.WriteString(`'); }, false)</script>
</body>
</html>
`)
	return w.Write(_buffer.Bytes())

}
