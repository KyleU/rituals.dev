// Code generated by hero.
// source: github.com/kyleu/rituals.dev/web/templates/index.html
// DO NOT EDIT!
package templates

import (
	"io"

	"github.com/kyleu/rituals.dev/app/estimate"
	"github.com/kyleu/rituals.dev/app/retro"
	"github.com/kyleu/rituals.dev/app/sprint"
	"github.com/kyleu/rituals.dev/app/standup"
	"github.com/kyleu/rituals.dev/app/team"
	"github.com/kyleu/rituals.dev/app/util"
	"github.com/kyleu/rituals.dev/app/web"
	"github.com/shiyanhui/hero"
)

func Index(ctx web.RequestContext, teams team.Sessions, sprints sprint.Sessions, estimates estimate.Sessions, standups standup.Sessions, retros retro.Sessions, w io.Writer) (int, error) {
	_buffer := hero.GetBuffer()
	defer hero.PutBuffer(_buffer)
	_buffer.WriteString(`<!DOCTYPE html>
<html lang="en">
`)
	Head(ctx, _buffer)
	_buffer.WriteString(`
<body style="visibility: hidden;">
`)
	Navbar(ctx, _buffer)
	_buffer.WriteString(`
<div id="`)
	hero.EscapeHTML(util.KeyContent, _buffer)
	_buffer.WriteString(`" data-uk-height-viewport="expand: true">
`)
	for _, flash := range ctx.Flashes {
		cls, content := web.ParseFlash(flash)
		_buffer.WriteString(`
  <div class="alert-top `)
		hero.EscapeHTML(cls, _buffer)
		_buffer.WriteString(`" data-uk-alert>
    <a class="uk-alert-close" href="#" data-uk-close=""></a>
    <p>`)
		hero.EscapeHTML(content, _buffer)
		_buffer.WriteString(`</p>
  </div>
`)
	}
	_buffer.WriteString(`
<div class="uk-section uk-section-small">
  <div class="uk-container">
    <div class="uk-grid-medium uk-grid-match uk-margin-medium" data-uk-grid>
      <div class="uk-width-1-2@s">
        <div class="uk-card uk-card-body">
          <h3 class="uk-card-title">
            <span class="right">
              <a class="`)
	hero.EscapeHTML(ctx.Profile.LinkClass(), _buffer)
	_buffer.WriteString(` uk-icon-button uk-margin-left" data-uk-icon="question" href="`)
	hero.EscapeHTML(ctx.Route(`about`), _buffer)
	_buffer.WriteString(`" title="about `)
	hero.EscapeHTML(util.AppName, _buffer)
	_buffer.WriteString(`"></a>
            </span>
            `)
	if ctx.Profile.Role == util.RoleAdmin {
		_buffer.WriteString(`
            <span class="right">
              <a class="`)
		hero.EscapeHTML(ctx.Profile.LinkClass(), _buffer)
		_buffer.WriteString(` uk-icon-button" data-uk-icon="info" href="`)
		hero.EscapeHTML(ctx.Route(`admin`), _buffer)
		_buffer.WriteString(`" title="you have admin rights"></a>
            </span>
            `)
	}
	_buffer.WriteString(`
            Join Now
          </h3>
          <form method="post" action="`)
	hero.EscapeHTML(ctx.Route(`join.post`), _buffer)
	_buffer.WriteString(`">
            <div class="uk-inline uk-display-block">
              <button type="submit" class="uk-form-icon uk-form-icon-flip" data-uk-icon="icon: forward"></button>
              <input class="uk-input" type="text" name="i" placeholder="Invite Code" />
            </div>
          </form>
        </div>
      </div>
      <div class="uk-width-1-2@s">
        <div class="uk-card uk-card-body uk-transition-toggle">
          `)
	IndexPanel(util.SvcTeam, ctx, _buffer)
	if len(teams) > 0 {
		_buffer.WriteString(`
          <ul class="uk-list uk-list-divider uk-margin-top">
            `)
		for _, t := range teams {
			_buffer.WriteString(`
            <li>
              <a class="`)
			hero.EscapeHTML(ctx.Profile.LinkClass(), _buffer)
			_buffer.WriteString(`" href="`)
			hero.EscapeHTML(ctx.Route(util.SvcTeam.Key, util.KeyKey, t.Slug), _buffer)
			_buffer.WriteString(`">`)
			hero.EscapeHTML(t.Title, _buffer)
			_buffer.WriteString(`</a>
            </li>
            `)
		}
		_buffer.WriteString(`
          </ul>
          `)
	}
	_buffer.WriteString(`
        </div>
      </div>
      <div class="uk-width-1-2@s">
        <div class="uk-card uk-card-body uk-transition-toggle">
          `)
	IndexPanel(util.SvcSprint, ctx, _buffer)
	if len(sprints) > 0 {
		_buffer.WriteString(`
            <ul class="uk-list uk-list-divider uk-margin-top">
              `)
		for _, s := range sprints {
			_buffer.WriteString(`
                <li>
                  <a class="`)
			hero.EscapeHTML(ctx.Profile.LinkClass(), _buffer)
			_buffer.WriteString(`" href="`)
			hero.EscapeHTML(ctx.Route(util.SvcSprint.Key, util.KeyKey, s.Slug), _buffer)
			_buffer.WriteString(`">`)
			hero.EscapeHTML(s.Title, _buffer)
			_buffer.WriteString(`</a>
                </li>
              `)
		}
		_buffer.WriteString(`
            </ul>
          `)
	}
	_buffer.WriteString(`
        </div>
      </div>
      <div class="uk-width-1-2@s">
        <div class="uk-card uk-card-body uk-transition-toggle">
          `)
	IndexPanel(util.SvcEstimate, ctx, _buffer)
	if len(estimates) > 0 {
		_buffer.WriteString(`
            <ul class="uk-list uk-list-divider uk-margin-top">
              `)
		for _, s := range estimates {
			_buffer.WriteString(`
                <li>
                  <a class="`)
			hero.EscapeHTML(ctx.Profile.LinkClass(), _buffer)
			_buffer.WriteString(`" href="`)
			hero.EscapeHTML(ctx.Route(util.SvcEstimate.Key, util.KeyKey, s.Slug), _buffer)
			_buffer.WriteString(`">`)
			hero.EscapeHTML(s.Title, _buffer)
			_buffer.WriteString(`</a>
                </li>
              `)
		}
		_buffer.WriteString(`
            </ul>
          `)
	}
	_buffer.WriteString(`
        </div>
      </div>
      <div class="uk-width-1-2@s">
        <div class="uk-card uk-card-body uk-transition-toggle">
          `)
	IndexPanel(util.SvcStandup, ctx, _buffer)
	if len(standups) > 0 {
		_buffer.WriteString(`
            <ul class="uk-list uk-list-divider uk-margin-top">
              `)
		for _, s := range standups {
			_buffer.WriteString(`
                <li>
                  <a class="`)
			hero.EscapeHTML(ctx.Profile.LinkClass(), _buffer)
			_buffer.WriteString(`" href="`)
			hero.EscapeHTML(ctx.Route(util.SvcStandup.Key, util.KeyKey, s.Slug), _buffer)
			_buffer.WriteString(`">`)
			hero.EscapeHTML(s.Title, _buffer)
			_buffer.WriteString(`</a>
                </li>
              `)
		}
		_buffer.WriteString(`
            </ul>
          `)
	}
	_buffer.WriteString(`
        </div>
      </div>
      <div class="uk-width-1-2@s">
        <div class="uk-card uk-card-body uk-transition-toggle">
          `)
	IndexPanel(util.SvcRetro, ctx, _buffer)
	if len(retros) > 0 {
		_buffer.WriteString(`
            <ul class="uk-list uk-list-divider uk-margin-top">
              `)
		for _, s := range retros {
			_buffer.WriteString(`
                <li>
                  <a class="`)
			hero.EscapeHTML(ctx.Profile.LinkClass(), _buffer)
			_buffer.WriteString(`" href="`)
			hero.EscapeHTML(ctx.Route(util.SvcRetro.Key, util.KeyKey, s.Slug), _buffer)
			_buffer.WriteString(`">`)
			hero.EscapeHTML(s.Title, _buffer)
			_buffer.WriteString(`</a>
                </li>
              `)
		}
		_buffer.WriteString(`
            </ul>
          `)
	}
	_buffer.WriteString(`
        </div>
      </div>
    </div>
  </div>
</div>
`)

	_buffer.WriteString(`
</div>
<script>window.addEventListener("load", function() { dom.initDom('`)
	hero.EscapeHTML(ctx.Profile.Theme.String(), _buffer)
	_buffer.WriteString(`'); }, false)</script>
</body>
</html>
`)
	return w.Write(_buffer.Bytes())

}
